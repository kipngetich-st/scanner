// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ScanStatus {
  pending
  running
  failed
  completed
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  role          String   @default("free")
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions      Session[]        @relation("UserSessions")
  accounts      Account[]
  subscriptions Subscription[]
  dailylimits   DailyScanLimit[]
  scans         Scan[]
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subscription {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Stripe fields
  stripeCustomerId     String? @unique
  stripeSubscriptionId String? @unique
  stripePriceId        String?

  // Paystack fields
  paystackCustomerCode     String? @unique // Paystack customer code
  paystackSubscriptionCode String? @unique // Paystack subscription code
  paystackPlanCode         String? // Paystack plan identifier

  status             String // active, canceled, incomplete, incomplete_expired, past_due, trialing, unpaid
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([stripeCustomerId])
  @@index([paystackCustomerCode])
}

model DailyScanLimit {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  scanCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
}

model Scan {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  domain    String
  status    ScanStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  results ScanResult[]
}

model ScanResult {
  id     String @id @default(uuid())
  scanId String
  scan   Scan   @relation(fields: [scanId], references: [id], onDelete: Cascade)

  vulnerabilityType String
  severity          String
  description       String
  recommendation    String
  affectedUrl       String
  evidence          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([scanId])
}
